import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();

export async function getAllCustomers() {
  const customer = await prisma.customers.findMany();
  return customer;
}

export async function getCustomer(id) {
  const customer = await prisma.customers.findUnique({
    where: {
      ID: id,
    },
  });
  return customer;
}
//test
export async function deleteCustomer(id) {
  const customer = await prisma.customers.delete({
    where: {
      ID: id,
    },
  });
  return customer;
}

export async function updateCustomer(id, body) {
  const customer = await prisma.customers.update({
    where: {
      ID: id,
    },
    data: {
      Title: body.Title,
      FirstName: body.FirstName,
      LastName: body.LastName,
      Phone: body.Phone,
      Street: body.Street,
      City: body.City,
      ZIPCode: body.ZIPCode,
      Misc: body.Misc,
    },
  });
  return customer;
}

export async function postCustomer(Customer) {
  const createdCustomer = await prisma.customers.create({ data: Customer });
  return createdCustomer; // the same as Customer, plus the id generated by the database
}

// Products
export async function getAllProducts() {
  const product = await prisma.products.findMany();
  return product;
}

export async function getProduct(id) {
  const product = await prisma.products.findUnique({
    where: {
      ID: id,
    },
  });
  return product;
}

export async function deleteProduct(id) {
  const product = await prisma.products.delete({
    where: {
      ID: id,
    },
  });
  return product;
}

export async function updateProduct(id, body) {
  const product = await prisma.products.update({
    where: {
      ID: id,
    },
    data: {
      Title: body.Title,
      FirstName: body.FirstName,
      LastName: body.LastName,
      Phone: body.Phone,
      Street: body.Street,
      City: body.City,
      ZIPCode: body.ZIPCode,
      Misc: body.Misc,
    },
  });
  return product;
}

export async function postProduct(Product) {
  const createdProduct = await prisma.products.create({ data: Product });
  return createdProduct; // the same as Customer, plus the id generated by the database
}

// Products
export async function getAllEvents() {
  const event = await prisma.events.findMany();
  return event;
}

export async function getEvent(id) {
  const event = await prisma.events.findUnique({
    where: {
      ID: id,
    },
  });
  return event;
}

export async function deleteEvent(id) {
  const event = await prisma.events.delete({
    where: {
      ID: id,
    },
  });
  return event;
}

export async function updateEvent(id, body) {
  const event = await prisma.events.update({
    where: {
      ID: id,
    },
    data: {
      Title: body.Title,
    },
  });
  return event;
}

export async function postEvent(Event) {
  const createdEvent = await prisma.events.create({ data: Event });
  return createdEvent; // the same as Customer, plus the id generated by the database
}
